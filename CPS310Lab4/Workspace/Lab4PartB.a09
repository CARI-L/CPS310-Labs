; Lab 4 ProgB
; Bubble Sort
; note: negative value is pushed out of list to the end
        .ORG    $100                    ; @ address 0x100...
LIST:   FCB     11,3,8,7,1,9,-3,4,5     ; form list of constant vals
LSTEND: RMB     2                       ; advance location counter 2 bits
NVAL:   RMB     2                       ; advance location counter 2 bits
STRT:   LDY     #lstend                 ; lstend -> Y                           
        LEAU    -1,y                    ; effective addr. of [Y - 1] -> U       
        STU     lstend                  ; U -> lstend                           ! list end holds list end - 1 on 1st pass
        LEAY    -list,y                 ; effective addr. of [Y - list] -> Y    ! Y is set to list length - 1, program runs for 8 loops
        STY     nval                    ; Y -> nval
        LEAY    -1,y                    ; effective addr. of [Y - 1] -> Y
LOOP1:  LDX     #list                   ; list -> X                             ! X is list pos counter. Set X at LIST
        ;comparing x to x + 1                                                       On later loops, line 14 is used as a RESET for X
LOOP2:  LDA     ,x+                     ; M[x] -> a, x+                         ! load current val to A and advance x
        CMPA    ,x                      ; compare a to m[x] 
        BLS     next                    ; if a <= m[x], branch to next          ! if curr val <= next val, we can move on
        ;Number Swapping Algorithm
        LDB     ,x                      ; else: m[x] -> b                       ! if we're here, we must be switching list elements first
        STA     ,x                      ; a -> M[x]                             ! curr val stored in next index
        STB     -1,x                    ; b -> M[x-1]                           ! next val stored in curr index
NEXT:   CMPX    lstend                  ; compare x to m[lstend]                ! Carry bit will set if x < val at end of list
        BLO     loop2                   ; if carry is set branch to loop2       ! if x is less than our current list end index, loop back to sort routine
        LEAX    -1,x                    ; effective addr. of [X - 1] -> X       ! decrement x
        STX     lstend                  ; x -> lstend                           ! set new list end to x
XEND:   LEAY    -1,y                    ; effective addr. of [Y - 1] -> Y       ! decrement y
        BNE     loop1                   ; if not equal branch to loop1          ! if y is not 0, we must continue looping
RETN:   JMP     $D000
        END